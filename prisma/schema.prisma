datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

enum AccountType {
  Business
  Leisure
  Admin
}

enum PackageType {
  all_inclusive
  custom
}

enum Purpose {
  leisure
  business
}

enum RequestStatus {
  pending
  awaitingResponse
  initialEditing
  confirmed
  invoiced
  paid
  editing
  canceled
}

enum UserLevel {
  tip_white
  tip_blue
  tip_black
  tip_gold
}

enum EditRequestType {
  normal
  emergency
  cancelation
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  password       String
  name           String
  phoneNumber    String
  birthday       DateTime
  gender         String
  extra          String?
  businessNumber String?
  accountType    AccountType
  requests       Request[]

  passcode String? @unique

  newsletter Boolean @default(false)
  referrer   String?

  moneySpent    Int             @default(0)
  userLevel     UserLevel       @default(tip_white)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  extraRequests ExtraRequests[]
  resetChance   ResetChance?

  @@index([email])
  @@index([name])
}

model Request {
  id Int @id @default(autoincrement())

  canceled    Boolean       @default(false)
  status      RequestStatus @default(pending)
  city        String[]
  from        DateTime
  to          DateTime
  adults      Int
  infants     Int
  purpose     Purpose
  packageType PackageType
  options     String[]
  extra       String?

  budget String?

  adminNotes String?

  price    Int?
  currency String?

  paid      Boolean   @default(false)
  paidAt    DateTime?
  quoteLink String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  confirmed Boolean @default(false)

  addedServices AddedInvoices[]

  summary    Json?
  travelPlan Json?

  coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String?

  sharedLink String? @unique

  uploads Upload[]

  editRequests  EditRequest[]
  extraRequests ExtraRequests[]
}

model AddedInvoices {
  id Int @id @default(autoincrement())

  request Request @relation(fields: [requestId], references: [id])

  price Int

  requestId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model EditRequest {
  id        Int     @id @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [id])
  requestId Int

  content String

  editRequestType EditRequestType

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExtraRequests {
  id Int @id @default(autoincrement())

  request   Request @relation(fields: [requestId], references: [id])
  requestId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  requestType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  description String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  requests    Request[]
}

model Upload {
  id        String   @id @default(uuid())
  title     String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  request   Request @relation(fields: [requestId], references: [id])
  requestId Int
}

model ResetChance {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
}
