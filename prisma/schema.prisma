generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String
  phoneNumber    String
  birthday       DateTime
  gender         String
  extra          String?
  businessNumber String?
  accountType    AccountType
  moneySpent     Int             @default(0)
  userLevel      UserLevel       @default(tip_white)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  passcode       String?         @unique
  newsletter     Boolean         @default(false)
  referrer       String?
  extraRequests  ExtraRequests[]
  requests       Request[]
  resetChance    ResetChance?

  @@index([email])
  @@index([name])
}

model Request {
  id            Int             @id @default(autoincrement())
  canceled      Boolean         @default(false)
  status        RequestStatus   @default(pending)
  city          String[]
  from          DateTime
  to            DateTime
  adults        Int
  infants       Int
  purpose       Purpose
  packageType   PackageType
  options       String[]
  extra         String?
  price         Int?
  currency      String?
  paid          Boolean         @default(false)
  paidAt        DateTime?
  quoteLink     String?
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  confirmed     Boolean         @default(false)
  summary       Json?
  travelPlan    Json?
  adminNotes    String?
  couponId      String?
  sharedLink    String?         @unique
  budget        String?
  startCity     String?
  addedServices AddedInvoices[]
  editRequests  EditRequest[]
  extraRequests ExtraRequests[]
  coupon        Coupon?         @relation(fields: [couponId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  uploads       Upload[]
}

model AddedInvoices {
  id        Int      @id @default(autoincrement())
  price     Int
  requestId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  request   Request  @relation(fields: [requestId], references: [id])
}

model EditRequest {
  id              Int             @id @default(autoincrement())
  requestId       Int
  content         String
  editRequestType EditRequestType
  completed       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  request         Request         @relation(fields: [requestId], references: [id])
}

model ExtraRequests {
  id          Int      @id @default(autoincrement())
  requestId   Int
  userId      String
  requestType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  request     Request  @relation(fields: [requestId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  description String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  requests    Request[]
}

model Upload {
  id        String   @id @default(uuid())
  title     String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requestId Int
  request   Request  @relation(fields: [requestId], references: [id])
}

model ResetChance {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum AccountType {
  Business
  Leisure
  Admin
}

enum PackageType {
  all_inclusive
  custom
}

enum Purpose {
  leisure
  business
}

enum RequestStatus {
  pending
  awaitingResponse
  initialEditing
  confirmed
  invoiced
  paid
  editing
  canceled
}

enum UserLevel {
  tip_white
  tip_blue
  tip_black
  tip_gold
}

enum EditRequestType {
  normal
  emergency
  cancelation
}
